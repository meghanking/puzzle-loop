;;------------------------

(defun getprintmap (currentmap)

	(setq resultresult
		(loop for i from 2 to (- (list-length (eval (cadr currentmap))) 1) collect
			(cond
				((equal 0 (mod i 2))
					(printevenrow i (cadr currentmap))
				)
				(t
					(printoddrow i (cadr currentmap) (car currentmap))
				)
			)
		)
	)
)

;;------------------------

(defun convertsymboleven (symbol)

	(cond
		((equal '(line) symbol)
			'=
		)(t 
			(convertsymbolany symbol)
		)
	)
)

;;------------------------

(defun convertsymbolodd (symbol)

	(cond 
		((equal '(line) symbol)
			'i
		)
		(t 
			(convertsymbolany symbol)
		)
	)
)

;;------------------------

(defun convertsymbolany (symbol)
	
	(cond 
		((equal '(xx) symbol) 
			'x
		)
		((equal '(x) symbol) 
			'*
		)
		((equal '(empty) symbol)
			'*
		)
	)
)

;;------------------------

(defun printevenrow (rowtoprint linerepmap)
	(setq lines (mapcar #'convertsymboleven (elt (eval linerepmap) (- rowtoprint 1))
	))
	 
	(setq result '())
	
	(loop for i from 1 to (- (list-length lines) 2) do
		(setq result 
			(append result 
				(list 
					'+
					(elt lines i)
				)
			)
		)
	)
	
	(append result (list '+))
)

;;------------------------
	
(defun printoddrow (rowtoprint linerepmap mapname)
	(setq symbols 
		(mapcar #'convertsymbolodd 
			(elt (eval linerepmap) (- rowtoprint 1)
			)
		)
	)
	
	(setq mapcontentsrow (elt (eval mapname) (- (convertlinetocontentrow rowtoprint) 1 )))
	
	(setq result '())
	
	(loop for i from 1 to (list-length mapcontentsrow) do
		(setq result 
			(append result 
				(list 
					(elt symbols (- i 1))
					(elt mapcontentsrow (- i 1))
				)
			)
		)
	)
	
	(append result (last symbols 1))
)


;;------------------------

(defun printmap (currentmap)

	(setq resultresult (getprintmap currentmap))
	
	(loop for i from 0 to (- (list-length resultresult) 1 ) do
		(print (elt resultresult i))
	)
	
	
	(print (dotstring))
	(print (tilestring))
	(statestring)
)