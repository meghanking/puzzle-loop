This report will detail the entire project. As a minimum this report should include:
1.	A description of the game. 
2.	A description of the implementation approach that was taken. 
3.	A description of all programs/classes/methods/functions written and all major variables used. 
4.	A flowchart of the program
5.	A calling hierarchy or UML diagram showing the various programs/methods/functions  and how the various programs/methods/functions call each other. 
6.	A description of what intelligence was implemented and what was not. Discuss why the non-implemented intelligence was not implemented.  
7.	A discussion of what you would do differently if you were able to start over.
A table of the CPU times needed to solve each board and the move sequences that were generated by your program when generating each solution should be submitted under the “Tournament Results” assignment. A complete code listing of your program and the tournament boards should be submitted under the “Final Code Submission” assignment.
 
what happens when a human places a move?

the move is placed… no matter what? or “fake”, evaluate, if good place

evaluate
•	the state of the two intersections you are connected too
o	will check for loop
•	the state of the amount of number restrictions near it (the two)
•	check if it made a closed loop
o	if yes: check if it made goal state (all the restrictions are completed)
list of references to restrictions that have not been checked if they are finished? eval this… maybe…
list of references to intersections that have not been finalized.
when a move is finally places
•	the place is placed to some value (tbd) indicating that it is a line!
•	the line count goes up by one
•	the map is reprinted so the user can see the move and choose another move
•	add this move to the list of moves made during the game
o	during automated play, say what was restricted as well (for testing purposes of course)
o	make that an option?? nah, just always but it, cause #yolo

Human interaction:
	should the backend ever have a “no” status on a move?
	yes, it will pre-emtively warn the program about potentially “bad” moves the user makes, and not allow them to do so…
