(defun makemap (mapname mapcontents)

	 (set mapname mapcontents)
	 (setq maplist (append maplist (list mapname)))
 )

;;------------------------

(defun makerepresentations (mapname) 

	(setq rownum (list-length (eval mapname)))
	(setq colnum (list-length (car (eval mapname))))
	(setq linerepmap (makelinerepmap rownum colnum))
	(setq linenum 0)
	(setq movelist '())
	(setq currentmap (list mapname 'linerepmap rownum colnum 'movelist 'linenum))
)



;;------------------------

(defun makelinerepmap (rownum colnum)

	(loop for i from 1 to (+ (* rownum 2) 3) collect
		(cond 
			((or (equal 1 i) (equal (+ (* rownum 2) 3) i))
				(make-sequence 'list (+ 1 colnum) :initial-element '(xx)
	)
			)
			((equal (mod i 2) 0)
				(append 
					(list '(xx)) 
					(make-sequence 'list colnum :initial-element '(empty)) 
					(list '(xx))
				)
			)
			(t 
				(make-sequence 'list (+ colnum 1) :initial-element '(empty)
				)
			)
		)
	)
)

;;------------------------
;;unimplemented
(defun makemove (rownum colnum sidetoplaceline)
	
	(setq numberrow (convertcontenttolinerow rownum))
	(setq numbercol colnum)
	
	(cond
		((equal sidetoplaceline 'T)
			(setq numberrow (- numberrow 1))
		)
		((equal sidetoplaceline 'B)
			(setq numberrow (+ numberrow 1))
		)		
	)
	
	(cond
		((equal sidetoplaceline 'R)
			(setq  numbercol (+ numbercol 1))
		)
		((equal sidetoplaceline 'T)
			(setq numbercol (+ numbercol 1))
		)
		((equal sidetoplaceline 'B)
			(setq numbercol (+ numbercol 1))
		)	
	)
	
	
	
	(setq linenum (+ 1 linenum))
	(setq movelist (append movelist (list (list rownum colnum sidetoplaceline))))
	
	(setq linerepmap 
		(loop for i from 1 to (list-length linerepmap) collect
			(cond
				((equal numberrow i)
					(loop for j from 1 to (list-length (elt linerepmap (- i 1))) collect
						(cond
							((equal numbercol j)
								'(line)
							)
							(t
								(elt (elt linerepmap (- i 1)) (- j 1))
							)
						)
					)
				)
				(t
					(elt linerepmap (- i 1))
				)
					
			)
		)
	)
	
	(printmap currentmap)
)	

;;------------------------
	;;numberol and numberrow is the lines placement in the linerepmap
	
(defun getdotsforline ( numbercol numberrow )


	(cond
		((equal (mod i 2) 0)
			(list
				(getDot (- numberrow 1) (- numbercol 1))
				(getDot (- numberrow 1) numbercol)
			)
		)
		(t
			(list
				(getDot numberrow numbercol)
				(getDot (- numberrow 2) numbercol)
			)
		)
	)
)

;; list of
;; 	yourself
;; 	right
;; 	bottom
;; 	left

;;------------------------
(defun getDot (numberrow numbercol)	
	(list 
		(elt (elt linerepmap (- numberrow 1)) (- numbercol 1))
		(elt (elt linerepmap numberrow) numbercol)
		(elt (elt linerepmap (+ numberrow 1)) (- numbercol 1))
		(elt (elt linerepmap numberrow) (- numbercol 1))
	)
)

;;------------------------
;;(defun isvalidplacement ( ... )

;;)

;;------------------------
;;unimplemented

;;(defun isclosedcircut ()
"given a starting line, tests to see if this line is contained in a closed loop"

;;save the original line you are looking at..
;;note: need to keep a line to pass in, maybe last line drawn... ill figure that out later

;;go to the next line in some direction, doesn't matter. keep a count of how many lines you have seen
;;note: if there is not a way to go in both directions, then its not a closed loop

;;if there is no line, not a closed circuit. return false?

;;if there is more than one, DONT LET THAT HAPPEN
;;besides the first time when you need to choose which direction to go in.. (if that doesn’t have two directions than end right there and then…

;;if there is, check if it is the original (points to the same place in memory), if its not, call this on the next line

;;if it is the original, check if the count you have is the same as the overall line count
;;means you have hit all the lines and it is a closed loop

;;)

;;------------------------
;; utilizes
;; 	printevenrow
;; 		convertsymboleven
;; 	printoddrow
;; 		convertsymbolodd


;;------------------------

(defun printmap (currentmap)

	(setq resultresult (getprintmap currentmap))
	
	(loop for i from 0 to (- (list-length resultresult) 1 ) do
		(print (elt resultresult i))
	)
	(string (statestring))
)

;;------------------------
	;;unimplemented for now
	;;will inform the user of
		;;bad move
		;;make another move
		;;game is over

(defun statestring ()
	(string "This is the current map state")

)
;;------------------------

(defun getprintmap (currentmap)

	(setq resultresult
		(loop for i from 2 to (- (list-length (eval (cadr currentmap))) 1) collect
			(cond
				((equal 0 (mod i 2))
					(printevenrow i (cadr currentmap))
				)
				(t
					(printoddrow i (cadr currentmap) (car currentmap))
				)
			)
		)
	)
)

;;------------------------

(defun convertsymboleven (symbol)

	(cond
		((equal '(line) symbol)
			'=
		)(t 
			(convertsymbolany symbol)
		)
	)
)

;;------------------------

(defun convertsymbolodd (symbol)

	(cond 
		((equal '(line) symbol)
			'i
		)
		(t 
			(convertsymbolany symbol)
		)
	)
)

;;------------------------

(defun convertsymbolany (symbol)
	
	(cond 
		((equal '(xx) symbol) 
			'x
		)
		((equal '(x) symbol) 
			'*
		)
		((equal '(empty) symbol)
			'*
		)
	)
)

;;------------------------

(defun printevenrow (rowtoprint linerepmap)
	(setq lines (mapcar #'convertsymboleven (elt (eval linerepmap) (- rowtoprint 1))
	))
	 
	(setq result '())
	
	(loop for i from 1 to (- (list-length lines) 2) do
		(setq result 
			(append result 
				(list 
					'+
					(elt lines i)
				)
			)
		)
	)
	
	(append result (list '+))
)

;;------------------------
	
(defun printoddrow (rowtoprint linerepmap mapname)
	(setq symbols 
		(mapcar #'convertsymbolodd 
			(elt (eval linerepmap) (- rowtoprint 1)
			)
		)
	)
	
	(setq mapcontentsrow (elt (eval mapname) (- (convertlinetocontentrow rowtoprint) 1 )))
	
	(setq result '())
	
	(loop for i from 1 to (list-length mapcontentsrow) do
		(setq result 
			(append result 
				(list 
					(elt symbols (- i 1))
					(elt mapcontentsrow (- i 1))
				)
			)
		)
	)
	
	(append result (last symbols 1))
)

;;------------------------

(defun convertlinetocontentrow (number)
	(/ (- number 1) 2 )
)

;;------------------------

(defun convertcontenttolinerow (number)
	(+ (* number 2) 1 )
)